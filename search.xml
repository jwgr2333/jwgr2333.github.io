<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STM32</title>
    <url>/2020/09/10/STM32/</url>
    <content><![CDATA[<img src="/2020/09/10/STM32/stm32.jpg" alt="image" style="zoom:25%;">

<h2 id="测控"><a href="#测控" class="headerlink" title="测控"></a>测控</h2><ul>
<li>被调剂到测控属实不行，啥都不会，发不了论文，学的前端也毫无作用。导师最后还是让我学习测控需要掌握的知识。</li>
<li>stm32</li>
<li>plc</li>
</ul>
<h2 id="STM32-寄存器"><a href="#STM32-寄存器" class="headerlink" title="STM32 寄存器"></a>STM32 寄存器</h2>]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>first article</title>
    <url>/2020/09/08/first-article/</url>
    <content><![CDATA[<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>全局安装hexo-cli，注意，是基于node的。需要安装node.js。安装完成检验一下npm -v , node -v。如果没问题，可以npm i -g hexo-cli全局安装了。当然也可以使用淘宝镜像。安装完成后就可以进入下一步了</p>
<h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>创建一个blog文件夹并进入，当然，起名可以无所谓。使用hexo init 初始化。等待完成后，hexo s 启动服务。这样你就拥有了一个最初的模板了。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>显然，我们不可能只在本地使用，那就直接搞md算了，何必用hexo。为了把我们的博客部署到github上，我们需要在主目录下 npm i -S hexo-deployer-git 安装这个插件帮助我们。接下来，修改一下主目录的_config.yml文件的deploy属性如图</p>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908201329857.png" alt="image-20200908201329857"></p>
<p>注意空格，同时在github需要创建一个仓库，取名一定是username.github.io  参照我的。随后使用命令，</p>
<p>hexo clean,hexo g, hexo d 就完成了往github的上传。这时，在浏览器输入 <a href="https://username.github.io/">https://username.github.io</a> 就可以看到啦。</p>
<p><font color="red">此外，有一些配置也是可以改的，比如title, languages, 等 如果是部署到个人的云服务器上的话可能需要修改URL，我是在github上所以可以暂时不用改</font></p>
<h2 id="主题theme"><a href="#主题theme" class="headerlink" title="主题theme"></a>主题theme</h2><p>当我们在完成以上的操作后，我们就拥有的自己的一个博客。但是这个博客的功能还是比较简陋的，为了方便，我们可以借用他人开源的一些基于hexo的主题帮助我们更好的装饰我们的博客。这里我使用的是butterfly。</p>
<p>github地址: <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a>  没事去点个star吧，确实好用~</p>
<ul>
<li><p>安装</p>
<p>安装也比较简单，在主文件夹克隆一下butterfly到themes目录下的butterfly文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<p>修改主目录下的_config.yml文件的theme属性为butterfly，如图_。理论上其他主题可能也可以这样改。当然我只是猜测~</p>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908202410942.png" alt="image-20200908202410942"></p>
<p>如果没有pug &amp; stylus renderer,作者也说了，需要这个.那我们就可以安装一下，因为已经安装了node，所以只需要在命令行操作即可    </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean, hexo g, hexo s &#x2F;&#x2F;看看效果</span><br></pre></td></tr></table></figure>

<p>理论上已经可以看到自己的博客啦，如果对这个主题不太满意，可以去看看别的主题。总有一款适合你~</p>
</li>
</ul>
<h2 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h2><p>做完前面的工作之后，发现可能还是不能满足我的要求，着实有点素。于是我开始了个性化定制~ 这个时候就遇到了一些困难。可能版本不同，网络上先行者的建议与我的还是有点出入。于是，我开始自己查看目录。在butterfly的source目录下出现了_config.yml配置文件。这个文件可能是与主目录下的_config.yml文件合并或覆盖的。因此，修改此文件应该可以解决我们的问题。</p>
<ul>
<li><p>menu</p>
<p>刚打开时menu是被注释掉的，显然，menu还是需要的，我们取消注释并稍微修改一下，注意！！我们修改的时候可以 hexo s 把项目运行起来，这样我们能及时补救错误</p>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908204113865.png" alt="image-20200908204113865"></p>
</li>
<li><p>Image设置</p>
<p>图片在代码中都有详细的提示，这里我就不过多说了，是选择删掉原图替换还是找网图都是可以的</p>
</li>
</ul>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908205136691.png" alt="image-20200908205136691"></p>
<ul>
<li><p>categories、tags功能的实现</p>
<p>在我们把menu搞定之后，虽然出现了一排menu，可是我们却点击不了。这是因为我们还没有这个页面呀，我们可以通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &lt;pagename&gt;</span><br></pre></td></tr></table></figure>

<p>创建页面，如 hexo new page tags。以此类推我们可以创建categories， messageboard等。创建出来后我们是可以不用管创建出的文件的。我们需要做的是在新建的hexo new ‘new article’中把tags、categories写上即可。</p>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908210251643.png" alt="image-20200908210251643"></p>
</li>
</ul>
<ul>
<li><p>comment功能的实现，要实现评论功能，我们这里借助的是Valine，需要</p>
<ul>
<li><p>注册<a href="https://leancloud.cn/dashboard/login.html#/signin">LeanCloud</a></p>
</li>
<li><p>创建应用：选择开发板即可。创建完成后进入应用keys，复制AppId、AppKey。粘贴到</p>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908211005945.png" alt="image-20200908211005945"></p>
<p>注意，在这一行需要把comments下的Valine加上，当然你也可以用其他的。这里就相应的修改</p>
<p><img src="https://jwgr2333.github.io/imgs/image-20200908211034230.png" alt="image-20200908211034230"></p>
</li>
</ul>
</li>
</ul>
<p>然后还有字数统计、特效等功能，只要你想开都是可以的。因为作者是香港人，所以有中文提示，按照提示来就完事了。</p>
<p><font color="red">在设置评论时，同时发现了一个问题，即不只是在messageboard下有评论框，在categories、tags下面都有。只需要在创建的index页面下加入这个即可</font></p>
<pre><code>comments: false</code></pre>
<p><img src="https://jwgr2333.github.io/imgs/image-20200909200350809.png" alt="image"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>暂时就写到这里吧，还有东西是我没有完善的。比如友链、music、videos、线上管理等。日后有时间可以继续完善吧~ 今天先做到这里。不得不说，hexo是一个非常优秀的博客框架。采用Markdown简直不要太方便。对我来说友好度爆棚。。而且用户庞大，意味着可以踩着前人的肩膀上前进。非常感谢先驱者的付出.</p>
<h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><p>本地图片显示不出来，改用相对路径也无法显示。（个人采用的是把本地的图片复制到imgs文件夹中一起上传到后台，然后通过github下的链接引用，如：<a href="https://jwgr2333.github.io/imgs/image-20200908211034230.png%EF%BC%89%E3%80%82%E8%BF%99%E6%A0%B7%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%9C%89%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98%E4%BA%86%E3%80%82">https://jwgr2333.github.io/imgs/image-20200908211034230.png）。这样就不会有图片显示的问题了。</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>作者：<a href="https://github.com/jerryc127">jerryc127</a>，github链接：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a><br>作者：<a href="https://me.csdn.net/weixin_43350051">XJHui’s Blog</a>，文章链接：<a href="https://blog.csdn.net/weixin_43350051/article/details/104923503">https://blog.csdn.net/weixin_43350051/article/details/104923503</a></p>
]]></content>
      <categories>
        <category>blog build</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/02/10/git/</url>
    <content><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul>
<li><p>在第一次使用时需要配置相关信息，配置两步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;1329042571@qq.com&quot;&#x2F;&#x2F;全局配置邮箱</span><br><span class="line">git config --global user.name&quot;谢鑫&quot;&#x2F;&#x2F;全局配置姓名</span><br><span class="line">git config user.name&#x2F;&#x2F;查看当前配置用户名</span><br><span class="line">git config user.email&#x2F;&#x2F;查看当前配置邮箱</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个仓库</p>
<p>在需要提交git 的目录git bash here，然后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitinit &#x2F;&#x2F;初始化</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们很容易遇到这样的错误</p>
</li>
</ul>
<p><img src="/2020/02/10/git/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200516110434481.png" alt="image-20200516110434481"></p>
<ul>
<li>这是文件无法跟踪，我们需要把这个文件加到git操作里面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add git练习.txt&#x2F;&#x2F;添加单个文件</span><br><span class="line">git add .  &#x2F;&#x2F;添加多个文件</span><br></pre></td></tr></table></figure>

<ul>
<li><p>提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;提交信息，必须写&quot;&#x2F;&#x2F;提交工作区的git代码到本地的git仓库</span><br></pre></td></tr></table></figure>
</li>
<li><p>版本回退</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ &#x2F;&#x2F;回退一个版本</span><br><span class="line">git reset --hard HEAD^^ &#x2F;&#x2F;回退两个版本</span><br></pre></td></tr></table></figure>

<ul>
<li>当回退后又想前进怎么办？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard 10bcce3  &#x2F;&#x2F;回退指定的版本，后面的是具体版本的id</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看每个版本的id</p>
</li>
<li><pre><code class="git">git reflog
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 当我们想把本地的新仓库与远程的仓库连接起来</span><br><span class="line"></span><br><span class="line">+ 注意，如果是新的，那么最好是空仓库</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;git</span><br><span class="line">&#x2F;&#x2F;进入所在仓库的目录</span><br><span class="line">&#x2F;&#x2F;与远程仓库连接</span><br><span class="line">git remote add origin 仓库地址</span><br><span class="line">&#x2F;&#x2F;推送，</span><br><span class="line">&#x2F;&#x2F;可能要输入密码，就输入我的密码就行了，不是输入秘钥</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="加入已经有的仓库"><a href="#加入已经有的仓库" class="headerlink" title="加入已经有的仓库"></a>加入已经有的仓库</h3><ul>
<li><pre><code class="git">git clone
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 拉取</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;git</span><br><span class="line">git pull origin master &#x2F;&#x2F;从主分支拉取</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>git操作</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack笔记</title>
    <url>/2020/09/12/webpack%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)*。当 *webpack</em> 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)*，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 *bundle</em>。 —— <em>webpack</em>官网</p>
<p>简而言之， webpack会</p>
]]></content>
  </entry>
  <entry>
    <title>吐槽200910</title>
    <url>/2020/09/10/%E5%90%90%E6%A7%BD200910/</url>
    <content><![CDATA[<h5 id="吐槽黄色衣服的小哥"><a href="#吐槽黄色衣服的小哥" class="headerlink" title="吐槽黄色衣服的小哥"></a>吐槽黄色衣服的小哥</h5><ul>
<li><p>刚进门就一个劲的推荐办卡</p>
</li>
<li><p>在解释自己已经有卡之后，沉浸了一段时间。</p>
</li>
<li><p>小哥发现头发侧面有点翘起来，让我去把这部分的头发做一下。（可能是因为头发长睡觉睡的）。我提出今天没时间，下次吧（委婉拒绝），小哥不依不饶，多次提出可以预约。我的耐心已经被消耗殆尽了。o(一︿一+)o！！最终忍无可忍直接拒绝。小哥甚至在拒绝后还是在絮絮叨叨。</p>
</li>
<li><p>下次还是选择其他的师傅吧，(⊙﹏⊙)。</p>
</li>
<li><p>想安安静静的剪个头发怎么这么难呢~</p>
</li>
</ul>
]]></content>
      <categories>
        <category>吐槽</category>
      </categories>
      <tags>
        <tag>理发店</tag>
      </tags>
  </entry>
  <entry>
    <title>数控系统</title>
    <url>/2020/09/16/%E6%95%B0%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="数控系统指令"><a href="#数控系统指令" class="headerlink" title="数控系统指令"></a>数控系统指令</h2><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><ul>
<li>G 准备功能指令</li>
<li>M 辅助功能指令</li>
<li>F 进给速度指令 如F100</li>
<li>S 主轴速度功能指令 （一定在零件加工前启动主轴运转）</li>
<li>T 指令 Tnn  刀具功能指令</li>
</ul>
<h4 id="常用准备功能指令"><a href="#常用准备功能指令" class="headerlink" title="常用准备功能指令"></a>常用准备功能指令</h4><ul>
<li><p>与坐标系有关的指令</p>
<ol>
<li>绝对坐标与增量坐标指示 —— G90、G91</li>
<li>坐标系设定指示 —— G92</li>
<li>坐标平面选择指令 —— G17、G18、G19 分别对应XY、ZX、YZ坐标平面的功能。</li>
</ol>
</li>
<li><p>运动控制指令</p>
<ol>
<li><p>快速点定位指令 —— G00，使刀具从当前位置以系统设定的最快速度快速移动到目的点。（快速定位）</p>
<p><font color="red">注意，最好了解操作机床的运动轨迹。三种方式中了解其中一种</font></p>
</li>
<li><p>直线插补指令——G01，该功能是直线运动控制指令，它命令刀具从当前位置以两坐标或三坐标联动方式按指定的F进给速度作任意斜率的直线运动到达指定的位置。该指令一般用作轮廓切削、</p>
<ul>
<li>格式：G01 X- Y- Z- F-；其中，XYZ为直线终点的绝对或增量坐标。F为沿插补方向的进给速度</li>
</ul>
<p><font color="red">G01指令既可以双坐标联动插补运动，又可以三坐标两栋插补运动，取决于数控系统的功能，当指令后面只有两个坐标值时，刀具将作平面直线插补，若有三个坐标值时，将做空间直线插补</font></p>
</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
