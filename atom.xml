<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X-后花园</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-24T06:25:50.597Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>XX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记uniapp组件坑</title>
    <link href="http://example.com/2020/09/24/%E8%AE%B0uniapp%E7%BB%84%E4%BB%B6%E5%9D%91/"/>
    <id>http://example.com/2020/09/24/%E8%AE%B0uniapp%E7%BB%84%E4%BB%B6%E5%9D%91/</id>
    <published>2020-09-24T02:23:33.000Z</published>
    <updated>2020-09-24T06:25:50.597Z</updated>
    
    <content type="html"><![CDATA[<h4 id="uniapp组件"><a href="#uniapp组件" class="headerlink" title="uniapp组件"></a>uniapp组件</h4><ul><li>引入的坑</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//失败的例子，在app.vue中</span></span><br><span class="line"><span class="keyword">import</span> playView <span class="keyword">from</span> <span class="string">&#x27;@/components/playView/playView&#x27;</span></span><br><span class="line">components:&#123;</span><br><span class="line">    playView</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成功的例子，在main.js中</span></span><br><span class="line"><span class="keyword">import</span> playView <span class="keyword">from</span> <span class="string">&#x27;./components/playView/playView.vue&#x27;</span></span><br><span class="line">Vue.component(<span class="string">&#x27;play-view&#x27;</span>, playView)</span><br></pre></td></tr></table></figure><ul><li><p>子组件调用父组件的坑，注意这里是@不是: ，这个语法用太少了。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//父组件引用子组件,</span></span><br><span class="line">&lt;play-view @hidePlayView=<span class="string">&quot;hidePlayView&quot;</span>&gt;&lt;/play-view&gt;</span><br><span class="line"><span class="comment">//父组件的方法</span></span><br><span class="line">hidePlayView()&#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.playView.hide()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件内容</span></span><br><span class="line">&lt;button @click=<span class="string">&quot;hide&quot;</span>&gt;hideView&lt;/button&gt;</span><br><span class="line">hide()&#123;</span><br><span class="line">    <span class="built_in">this</span>.$emit(<span class="string">&#x27;hidePlayView&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在vue中使用vuex的问题</p><ul><li>问题，多个组件同时使用了this.$store.song的数据。当A组件使用this.$store.commit更新song的某一个数据后，打印出在this.$store.song的数据却是发生了变化，却没有触发b组件的computed属性。这是为什么？</li><li>最后是通过其他方式解决了这个问题<ul><li>我是想通过监听vuex中song的state的数据变化，实现对index页面下的iac播放器的控制，结果发现当改变了后却没有用，index下的computed监听事件没有变化。因此我后续给组件传入了iac对象解决了这个问题。</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;uniapp组件&quot;&gt;&lt;a href=&quot;#uniapp组件&quot; class=&quot;headerlink&quot; title=&quot;uniapp组件&quot;&gt;&lt;/a&gt;uniapp组件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;引入的坑&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="踩坑" scheme="http://example.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理笔记</title>
    <link href="http://example.com/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-21T06:20:35.000Z</published>
    <updated>2020-09-24T08:29:05.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>计算机底层硬件是如何协调工作的</li><li>硬件之间的数据传输</li><li>数字、文字、图像如何用二进制表示</li><li>如何存储这些二进制数的</li><li>如何对这些二进制数进行计算</li><li>如何从内存中读取想要的数据</li><li>平时写的程序如何被CPU识别和执行</li></ol><h5 id="硬件的发展"><a href="#硬件的发展" class="headerlink" title="硬件的发展"></a>硬件的发展</h5><ul><li><p>电子管 （1946-1957）-&gt; 晶体管（1958-1964体积小） -&gt; 中小规模集成电路 （1964-1971稳定）-&gt; 大规模、超大规模继承电路（1972- 开始诞生操作系统），逻辑元件越来越小，单位面积的逻辑元件越来越多，功耗越来越低</p></li><li><p>仙童半导体公司</p></li><li><p>摩尔定律：集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，整体性能也将提升一倍</p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/img_0821.png" alt="计算机发展历程" style="zoom: 25%;"></li></ul><h5 id="计算机的硬件基本组成"><a href="#计算机的硬件基本组成" class="headerlink" title="计算机的硬件基本组成"></a>计算机的硬件基本组成</h5><ul><li>早期冯洛伊曼机<ul><li>计算机由五大部件组成 输入设备、存储器、运算器、控制器、输出设备。</li><li>指令和数据以同等地位存于存储器，可以按地址寻访</li><li>指令和数据用二进制表示</li><li>指令由操作码和地址码组成。</li><li>以运算器为中心</li></ul></li></ul><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/img_0822.png" alt="知识回顾" style="zoom:25%;"><ul><li><p>认识各个硬件部件</p><ul><li><p>主存储器</p><ul><li>存储体（存储数据的地方）<ul><li>存储单元</li><li>存储字</li><li>存储字长</li><li>存储元</li></ul></li><li>MAR（存储地址寄存器）<ul><li>位数等于存储字长</li></ul></li><li>MDR（存储数据寄存器）<ul><li>每个存储单元可以存放16bit，一个字 = 16bit</li></ul></li></ul><p>1B为一个字节，1个字节为8bit</p></li><li><p>运算器的基本组成</p><p>用于实现算术运算（如：加减乘除、逻辑运算）</p><ul><li>ACC 累加器</li><li>MQ 乘商寄存器，用于在乘除运算时，存放操作数或者运算结果</li><li>X 通用操作数寄存器，存放操作数</li><li>ALU 算数逻辑单元(核心部件)，通过内部复杂电路实现算数运算、逻辑运算</li></ul></li><li><p>控制器的基本组成</p><ul><li><p>CU：控制单元、分析指令、给出控制信号</p></li><li><p>IR：指令寄存器，存放当前执  行的指令</p></li><li><p>PC：程序计数器，存放下一条指令地址，有自动加一的功能 </p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/img_0823.png" alt="img_0823" style="zoom:25%;"></li></ul></li><li><p>编译程序与解释程序</p><ul><li>编译：将源程序全部语句一次全部翻译成机器语言程序，然后再执行机器语言程序（只需翻译一次）</li><li>解释：将源程序的一条语句翻译成对应于机器语言的语句，并立即执行，紧接着再翻译下一句。</li></ul></li><li><p>在收到指令后，硬件如何工作？</p></li><li><p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0824.png" alt="img_0824"></p></li></ul></li></ul><h5 id="计算进数制"><a href="#计算进数制" class="headerlink" title="计算进数制"></a>计算进数制</h5><ul><li><p>数据如何在计算机中表示？</p></li><li><p>运算器如何实现数据的运算？</p></li><li><p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0825.png" alt="img_0825"></p><h5 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h5></li></ul><p>用四个二进制表示十进制。其中有四个是冗余的</p><ul><li>8421码，如果两个数相加落在了非法区间（1010-10010），那么需要加6进行修正 </li><li>余三码，8421码+（0011）<sub>2</sub></li><li>2421码</li><li><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0826.png" alt="img_0826"></li></ul><h5 id="字符与字符串"><a href="#字符与字符串" class="headerlink" title="字符与字符串"></a>字符与字符串</h5><ul><li><p>ASCII码</p><ul><li>数字、字母、符号。共128个字符，刚好是2<sup>7</sup>。</li><li><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0827.png" alt="img_0827"></li></ul></li><li><p>汉字的表示与编码</p><ul><li>GB2312-80</li></ul><p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0828.png" alt="img_0828"></p><h5 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h5><p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0829.png" alt="img_0829"></p></li></ul><h5 id="海明校验码"><a href="#海明校验码" class="headerlink" title="海明校验码"></a>海明校验码</h5><ul><li>把信息位进行分组，分别进行偶校验，多个校验位标注出错位置</li><li>2<sup>k</sup>  &gt; n+k+1(信息位加校验位加正确的情况)  </li><li><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0830.png" alt="img_0830">      </li></ul><h5 id="循环冗余校检码"><a href="#循环冗余校检码" class="headerlink" title="循环冗余校检码"></a>循环冗余校检码</h5><p>​    约定一个除数。信息位加校验位作为被除数。看余数是否为0</p><ul><li>模二除，模二减                                                                         </li></ul><p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0831.png" alt="img_0831"></p><h5 id="定点数、浮点数"><a href="#定点数、浮点数" class="headerlink" title="定点数、浮点数"></a>定点数、浮点数</h5><ul><li><p>整个机器字长的全部二进制均为数值位，没有符号位，相当于数的绝对值</p></li><li><p>无符号数</p></li><li><p>有符号数的定点表示（采用原码、反码、补码）</p><ul><li>原码<ul><li>采用-定点整数与定点小数表示，符号位+数值部分。</li></ul></li><li>反码（并没有太大的用处）<ul><li>如果符号位为0，反码与原码完全相同</li><li>如果符号位为1，则数值位完全取反</li></ul></li></ul></li><li><p>补码</p><ul><li>正数的补码为原码</li><li>负数的补码 = 反码末尾+1<ul><li>移码</li></ul></li><li>在补码的基础上将符号位取反，移码只用于整数</li><li><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/.%5Cimg_0832.png" alt="img_0832"><ul><li>减法操作可以通过补码转换成加法操作</li><li><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/img_0834.png" alt="img_0834" style="zoom:25%;"></li></ul></li></ul></li><li><p>强制类型转换</p><ul><li>有符号数转无符号数，改变解释方式，不改变数据内容</li><li>长整数变短整数。高位截短，保留低位</li><li>短数据转长数据，符号扩展</li></ul></li><li><p>数据的存储与排列</p><ul><li>存储字节的方式<ul><li>大/小端方式（存储方式由低字节到高字节，小端是反过来存储的 ）</li><li>边界对齐</li></ul></li></ul></li></ul><h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><p>为了解决当使用int字节不够时采用的存储数据的方式·分为阶码和尾数。</p><ul><li>阶码： 常用补码或移码表示的定点整数  E</li><li>尾数：常用原码或补码表示的定点小数   M                                 </li></ul><p>浮点数的真值 N = r <sup>E</sup> x  M  (r为阶码的底，一般为2)</p><p>为了让浮点数能存储更多的数据。左规与右规</p><img src="/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/img_0835.png" alt="img_0835" style="zoom:25%;"><h5 id="电路基本原理"><a href="#电路基本原理" class="headerlink" title="电路基本原理"></a>电路基本原理</h5><ul><li>算术逻辑单元 ALU</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;计算机底层硬件是如何协调工作的&lt;/li&gt;
&lt;li&gt;硬件之间的数据传输&lt;/li&gt;
&lt;li&gt;数字、文字、图像如何用二进制表示&lt;/li</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>数控系统</title>
    <link href="http://example.com/2020/09/16/%E6%95%B0%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2020/09/16/%E6%95%B0%E6%8E%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-09-16T13:44:58.000Z</published>
    <updated>2020-09-21T14:19:16.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数控系统指令"><a href="#数控系统指令" class="headerlink" title="数控系统指令"></a>数控系统指令</h2><h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h4><ul><li>G 准备功能指令</li><li>M 辅助功能指令</li><li>F 进给速度指令 如F100</li><li>S 主轴速度功能指令 （一定在零件加工前启动主轴运转）</li><li>T 指令 Tnn  刀具功能指令</li></ul><h4 id="常用准备功能指令"><a href="#常用准备功能指令" class="headerlink" title="常用准备功能指令"></a>常用准备功能指令</h4><ul><li><p>与坐标系有关的指令</p><ol><li>绝对坐标与增量坐标指示 —— G90、G91</li><li>坐标系设定指示 —— G92</li><li>坐标平面选择指令 —— G17、G18、G19 分别对应XY、ZX、YZ坐标平面的功能。</li></ol></li><li><p>运动控制指令</p><ol><li><p>快速点定位指令 —— G00，使刀具从当前位置以系统设定的最快速度快速移动到目的点。（快速定位）</p><p><font color="red">注意，最好了解操作机床的运动轨迹。三种方式中了解其中一种</font></p></li><li><p>直线插补指令——G01，该功能是直线运动控制指令，它命令刀具从当前位置以两坐标或三坐标联动方式按指定的F进给速度作任意斜率的直线运动到达指定的位置。该指令一般用作轮廓切削、</p><ul><li>格式：G01 X- Y- Z- F-；其中，XYZ为直线终点的绝对或增量坐标。F为沿插补方向的进给速度</li></ul><p><font color="red">G01指令既可以双坐标联动插补运动，又可以三坐标两栋插补运动，取决于数控系统的功能，当指令后面只有两个坐标值时，刀具将作平面直线插补，若有三个坐标值时，将做空间直线插补</font></p></li></ol></li><li><p>圆弧插补指令——G02、G03</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数控系统指令&quot;&gt;&lt;a href=&quot;#数控系统指令&quot; class=&quot;headerlink&quot; title=&quot;数控系统指令&quot;&gt;&lt;/a&gt;数控系统指令&lt;/h2&gt;&lt;h4 id=&quot;基本指令&quot;&gt;&lt;a href=&quot;#基本指令&quot; class=&quot;headerlink&quot; title=&quot;基</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack笔记</title>
    <link href="http://example.com/2020/09/12/webpack%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/09/12/webpack%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-12T07:55:06.000Z</published>
    <updated>2020-09-12T13:51:09.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的<em>静态模块打包器(module bundler)*。当 *webpack</em> 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)*，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 *bundle</em>。 —— <em>webpack</em>官网</p><p>简而言之， webpack会</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是webpack&quot;&gt;&lt;/a&gt;什么是webpack&lt;/h2&gt;&lt;p&gt;本质上，&lt;em&gt;webpack&lt;/em&gt; 是一个现代 JavaScript </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>STM32</title>
    <link href="http://example.com/2020/09/10/STM32/"/>
    <id>http://example.com/2020/09/10/STM32/</id>
    <published>2020-09-10T12:37:44.000Z</published>
    <updated>2020-09-11T11:21:55.601Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/09/10/STM32/stm32.jpg" alt="image" style="zoom:25%;"><h2 id="测控"><a href="#测控" class="headerlink" title="测控"></a>测控</h2><ul><li>被调剂到测控属实不行，啥都不会，发不了论文，学的前端也毫无作用。导师最后还是让我学习测控需要掌握的知识。</li><li>stm32</li><li>plc</li></ul><h2 id="STM32-寄存器"><a href="#STM32-寄存器" class="headerlink" title="STM32 寄存器"></a>STM32 寄存器</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2020/09/10/STM32/stm32.jpg&quot; alt=&quot;image&quot; style=&quot;zoom:25%;&quot;&gt;

&lt;h2 id=&quot;测控&quot;&gt;&lt;a href=&quot;#测控&quot; class=&quot;headerlink&quot; title=&quot;测控&quot;&gt;&lt;/a&gt;测控&lt;/h2&gt;&lt;u</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="stm32" scheme="http://example.com/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>吐槽200910</title>
    <link href="http://example.com/2020/09/10/%E5%90%90%E6%A7%BD200910/"/>
    <id>http://example.com/2020/09/10/%E5%90%90%E6%A7%BD200910/</id>
    <published>2020-09-10T02:07:35.000Z</published>
    <updated>2020-09-11T11:24:51.336Z</updated>
    
    <content type="html"><![CDATA[<h5 id="吐槽黄色衣服的小哥"><a href="#吐槽黄色衣服的小哥" class="headerlink" title="吐槽黄色衣服的小哥"></a>吐槽黄色衣服的小哥</h5><ul><li><p>刚进门就一个劲的推荐办卡</p></li><li><p>在解释自己已经有卡之后，沉浸了一段时间。</p></li><li><p>小哥发现头发侧面有点翘起来，让我去把这部分的头发做一下。（可能是因为头发长睡觉睡的）。我提出今天没时间，下次吧（委婉拒绝），小哥不依不饶，多次提出可以预约。我的耐心已经被消耗殆尽了。o(一︿一+)o！！最终忍无可忍直接拒绝。小哥甚至在拒绝后还是在絮絮叨叨。</p></li><li><p>下次还是选择其他的师傅吧，(⊙﹏⊙)。</p></li><li><p>想安安静静的剪个头发怎么这么难呢~</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;吐槽黄色衣服的小哥&quot;&gt;&lt;a href=&quot;#吐槽黄色衣服的小哥&quot; class=&quot;headerlink&quot; title=&quot;吐槽黄色衣服的小哥&quot;&gt;&lt;/a&gt;吐槽黄色衣服的小哥&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;刚进门就一个劲的推荐办卡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在解释</summary>
      
    
    
    
    <category term="吐槽" scheme="http://example.com/categories/%E5%90%90%E6%A7%BD/"/>
    
    
    <category term="理发店" scheme="http://example.com/tags/%E7%90%86%E5%8F%91%E5%BA%97/"/>
    
  </entry>
  
  <entry>
    <title>first article</title>
    <link href="http://example.com/2020/09/08/first-article/"/>
    <id>http://example.com/2020/09/08/first-article/</id>
    <published>2020-09-08T04:30:55.000Z</published>
    <updated>2020-09-11T11:24:14.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>全局安装hexo-cli，注意，是基于node的。需要安装node.js。安装完成检验一下npm -v , node -v。如果没问题，可以npm i -g hexo-cli全局安装了。当然也可以使用淘宝镜像。安装完成后就可以进入下一步了</p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>创建一个blog文件夹并进入，当然，起名可以无所谓。使用hexo init 初始化。等待完成后，hexo s 启动服务。这样你就拥有了一个最初的模板了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>显然，我们不可能只在本地使用，那就直接搞md算了，何必用hexo。为了把我们的博客部署到github上，我们需要在主目录下 npm i -S hexo-deployer-git 安装这个插件帮助我们。接下来，修改一下主目录的_config.yml文件的deploy属性如图</p><p><img src="https://jwgr2333.github.io/imgs/image-20200908201329857.png" alt="image-20200908201329857"></p><p>注意空格，同时在github需要创建一个仓库，取名一定是username.github.io  参照我的。随后使用命令，</p><p>hexo clean,hexo g, hexo d 就完成了往github的上传。这时，在浏览器输入 <a href="https://username.github.io/">https://username.github.io</a> 就可以看到啦。</p><p><font color="red">此外，有一些配置也是可以改的，比如title, languages, 等 如果是部署到个人的云服务器上的话可能需要修改URL，我是在github上所以可以暂时不用改</font></p><h2 id="主题theme"><a href="#主题theme" class="headerlink" title="主题theme"></a>主题theme</h2><p>当我们在完成以上的操作后，我们就拥有的自己的一个博客。但是这个博客的功能还是比较简陋的，为了方便，我们可以借用他人开源的一些基于hexo的主题帮助我们更好的装饰我们的博客。这里我使用的是butterfly。</p><p>github地址: <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a>  没事去点个star吧，确实好用~</p><ul><li><p>安装</p><p>安装也比较简单，在主文件夹克隆一下butterfly到themes目录下的butterfly文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;butterfly</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p>修改主目录下的_config.yml文件的theme属性为butterfly，如图_。理论上其他主题可能也可以这样改。当然我只是猜测~</p><p><img src="https://jwgr2333.github.io/imgs/image-20200908202410942.png" alt="image-20200908202410942"></p><p>如果没有pug &amp; stylus renderer,作者也说了，需要这个.那我们就可以安装一下，因为已经安装了node，所以只需要在命令行操作即可    </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean, hexo g, hexo s &#x2F;&#x2F;看看效果</span><br></pre></td></tr></table></figure><p>理论上已经可以看到自己的博客啦，如果对这个主题不太满意，可以去看看别的主题。总有一款适合你~</p></li></ul><h2 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h2><p>做完前面的工作之后，发现可能还是不能满足我的要求，着实有点素。于是我开始了个性化定制~ 这个时候就遇到了一些困难。可能版本不同，网络上先行者的建议与我的还是有点出入。于是，我开始自己查看目录。在butterfly的source目录下出现了_config.yml配置文件。这个文件可能是与主目录下的_config.yml文件合并或覆盖的。因此，修改此文件应该可以解决我们的问题。</p><ul><li><p>menu</p><p>刚打开时menu是被注释掉的，显然，menu还是需要的，我们取消注释并稍微修改一下，注意！！我们修改的时候可以 hexo s 把项目运行起来，这样我们能及时补救错误</p><p><img src="https://jwgr2333.github.io/imgs/image-20200908204113865.png" alt="image-20200908204113865"></p></li><li><p>Image设置</p><p>图片在代码中都有详细的提示，这里我就不过多说了，是选择删掉原图替换还是找网图都是可以的</p></li></ul><p><img src="https://jwgr2333.github.io/imgs/image-20200908205136691.png" alt="image-20200908205136691"></p><ul><li><p>categories、tags功能的实现</p><p>在我们把menu搞定之后，虽然出现了一排menu，可是我们却点击不了。这是因为我们还没有这个页面呀，我们可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &lt;pagename&gt;</span><br></pre></td></tr></table></figure><p>创建页面，如 hexo new page tags。以此类推我们可以创建categories， messageboard等。创建出来后我们是可以不用管创建出的文件的。我们需要做的是在新建的hexo new ‘new article’中把tags、categories写上即可。</p><p><img src="https://jwgr2333.github.io/imgs/image-20200908210251643.png" alt="image-20200908210251643"></p></li></ul><ul><li><p>comment功能的实现，要实现评论功能，我们这里借助的是Valine，需要</p><ul><li><p>注册<a href="https://leancloud.cn/dashboard/login.html#/signin">LeanCloud</a></p></li><li><p>创建应用：选择开发板即可。创建完成后进入应用keys，复制AppId、AppKey。粘贴到</p><p><img src="https://jwgr2333.github.io/imgs/image-20200908211005945.png" alt="image-20200908211005945"></p><p>注意，在这一行需要把comments下的Valine加上，当然你也可以用其他的。这里就相应的修改</p><p><img src="https://jwgr2333.github.io/imgs/image-20200908211034230.png" alt="image-20200908211034230"></p></li></ul></li></ul><p>然后还有字数统计、特效等功能，只要你想开都是可以的。因为作者是香港人，所以有中文提示，按照提示来就完事了。</p><p><font color="red">在设置评论时，同时发现了一个问题，即不只是在messageboard下有评论框，在categories、tags下面都有。只需要在创建的index页面下加入这个即可</font></p><pre><code>comments: false</code></pre><p><img src="https://jwgr2333.github.io/imgs/image-20200909200350809.png" alt="image"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>暂时就写到这里吧，还有东西是我没有完善的。比如友链、music、videos、线上管理等。日后有时间可以继续完善吧~ 今天先做到这里。不得不说，hexo是一个非常优秀的博客框架。采用Markdown简直不要太方便。对我来说友好度爆棚。。而且用户庞大，意味着可以踩着前人的肩膀上前进。非常感谢先驱者的付出.</p><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><p>本地图片显示不出来，改用相对路径也无法显示。（个人采用的是把本地的图片复制到imgs文件夹中一起上传到后台，然后通过github下的链接引用，如：<a href="https://jwgr2333.github.io/imgs/image-20200908211034230.png%EF%BC%89%E3%80%82%E8%BF%99%E6%A0%B7%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%9C%89%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98%E4%BA%86%E3%80%82">https://jwgr2333.github.io/imgs/image-20200908211034230.png）。这样就不会有图片显示的问题了。</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>作者：<a href="https://github.com/jerryc127">jerryc127</a>，github链接：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a><br>作者：<a href="https://me.csdn.net/weixin_43350051">XJHui’s Blog</a>，文章链接：<a href="https://blog.csdn.net/weixin_43350051/article/details/104923503">https://blog.csdn.net/weixin_43350051/article/details/104923503</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首先&quot;&gt;&lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=&quot;首先&quot;&gt;&lt;/a&gt;首先&lt;/h2&gt;&lt;p&gt;全局安装hexo-cli，注意，是基于node的。需要安装node.js。安装完成检验一下npm -v , node -v。如果没问题，可以</summary>
      
    
    
    
    <category term="blog build" scheme="http://example.com/categories/blog-build/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/02/10/git/"/>
    <id>http://example.com/2020/02/10/git/</id>
    <published>2020-02-10T12:37:44.000Z</published>
    <updated>2020-09-11T11:10:34.717Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ul><li><p>在第一次使用时需要配置相关信息，配置两步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;1329042571@qq.com&quot;&#x2F;&#x2F;全局配置邮箱</span><br><span class="line">git config --global user.name&quot;谢鑫&quot;&#x2F;&#x2F;全局配置姓名</span><br><span class="line">git config user.name&#x2F;&#x2F;查看当前配置用户名</span><br><span class="line">git config user.email&#x2F;&#x2F;查看当前配置邮箱</span><br></pre></td></tr></table></figure></li><li><p>创建一个仓库</p><p>在需要提交git 的目录git bash here，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitinit &#x2F;&#x2F;初始化</span><br></pre></td></tr></table></figure></li><li><p>我们很容易遇到这样的错误</p></li></ul><p><img src="/2020/02/10/git/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200516110434481.png" alt="image-20200516110434481"></p><ul><li>这是文件无法跟踪，我们需要把这个文件加到git操作里面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add git练习.txt&#x2F;&#x2F;添加单个文件</span><br><span class="line">git add .  &#x2F;&#x2F;添加多个文件</span><br></pre></td></tr></table></figure><ul><li><p>提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;提交信息，必须写&quot;&#x2F;&#x2F;提交工作区的git代码到本地的git仓库</span><br></pre></td></tr></table></figure></li><li><p>版本回退</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ &#x2F;&#x2F;回退一个版本</span><br><span class="line">git reset --hard HEAD^^ &#x2F;&#x2F;回退两个版本</span><br></pre></td></tr></table></figure><ul><li>当回退后又想前进怎么办？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 10bcce3  &#x2F;&#x2F;回退指定的版本，后面的是具体版本的id</span><br></pre></td></tr></table></figure><ul><li><p>查看每个版本的id</p></li><li><pre><code class="git">git reflog<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 当我们想把本地的新仓库与远程的仓库连接起来</span><br><span class="line"></span><br><span class="line">+ 注意，如果是新的，那么最好是空仓库</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;git</span><br><span class="line">&#x2F;&#x2F;进入所在仓库的目录</span><br><span class="line">&#x2F;&#x2F;与远程仓库连接</span><br><span class="line">git remote add origin 仓库地址</span><br><span class="line">&#x2F;&#x2F;推送，</span><br><span class="line">&#x2F;&#x2F;可能要输入密码，就输入我的密码就行了，不是输入秘钥</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="加入已经有的仓库"><a href="#加入已经有的仓库" class="headerlink" title="加入已经有的仓库"></a>加入已经有的仓库</h3><ul><li><pre><code class="git">git clone<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 拉取</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;git</span><br><span class="line">git pull origin master &#x2F;&#x2F;从主分支拉取</span><br></pre></td></tr></table></figure></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在第一次使用时需要配置相关信息，配置两步&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;</summary>
      
    
    
    
    <category term="git操作" scheme="http://example.com/categories/git%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
